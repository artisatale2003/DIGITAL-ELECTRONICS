library ieee;
use ieee.std_logic_1164.all;

entity ALU is
	port (
	A: in std_logic_vector(3 downto 0);
	B: in std_logic_vector(3 downto 0);
	sel: in std_logic_vector(1 downto 0);
	op: out std_logic_vector(7 downto 0)
	) ;
end alu_beh;

architecture a1 of ALU is

function MAX(A: in std_logic_vector(3 downto 0); B: in std_logic_vector(3 downto 0))
	return std_logic_vector is
	variable maximum : std_logic_vector(7 downto 0):=(others => '0');
	begin
			if (A > B) then
				maximum := "0000" & A;
				
			elsif (B < A) then
				maximum := "0000" & B;
			
			else;
				maximum := (others => '0');
			
			end if;
			
			
		
	return maximum;
	end MAX;
	
function AND_12(A: in std_logic_vector(3 downto 0); B: in std_logic_vector(3 downto 0))
	return std_logic_vector is
	
	variable andmul : std_logic_vector(7 downto 0):=(others =>'0');
	begin
	
	andmul = "0000" & (A and B);
	return AND_12;
	end AND_12;
	
function Eq(A: in std_logic_vector(3 downto 0); B: in std_logic_vector(3 downto 0))
	return std_logic_vector is
	variable same : std_logic_vector(7 downto 0):=(others =>'0');
	
	begin
		if(A = b) then
			same := "0000" & A;
		else
			same := (others => '0');


	return same;
	end Eq;
	
function shift(A: in std_logic_vector(3 downto 0); B: in std_logic_vector(3 downto 0))
	return std_logic_vector is
	
	variable barrelshift, sig1, sig2, sig3, sig4 : std_logic_vector(7 downto 0):=(others =>'0');
	begin
		
		if (B(3) = '0') then	
		for i in 0 to 7 loop 
			sig1(i) <= A(7 - i);
			end loop;
		else 
			sig1 <= A;
		end if;
		
		sig2 <= sig1;
		sig3 <= sig2;
		sig4 <= sig3;
	
		if (b(1 downto 0) = "11") then
        sig2 <= "000" & sig1(7 downto 3);
		end if;
    
		if (b(1 downto 0) = '10') then
		  sig3 <= "00" & sig2(7 downto 2);
		end if;
    
		if (b(1 downto 0) = '01') then
		  sig4 <= "0" & sig3(7 downto 1);      
            end if;

		if (B(3) = '0') then
        for i in 0 to 7 loop
            barrelshift(i) <= sig4(7 - i);
        end loop;
		else
        barrelshift <= sig4;
		end if;
		

	return barrelshift;
	end shift;
	

begin

	alu : process( A, B, sel )
begin
	case sel is
		when "00" then => 
			op <= concat(A,B);

		when "01" then => 
			op := "000" & sub(A,B);

		when "10" then => 
			op := "XOR_3(A,B);
		
		when "11" then => 
			op := shift(A, B);
	
end process ; --alu
end a1 ; -- a1
